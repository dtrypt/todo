<section class="todoapp">
  <header class="header">
    <h1>Todos</h1>
    <form id="new-form">
      <input type="text" class="new-todo" />
  </header>

  <section class="main">
    <ul class="todo-list">
<h2>hi bitch</h2>
    </ul>

  </section>
</section>

<script>
  $(function() {

    function taskHtml(task) {
      var checkedStatus = task.done ? "checked" : "";
      var liElement = '<li><div class="view"><input class="toggle" type="checkbox"' +
        " data-id='" + task.id + "'" + //data id is task id
        checkedStatus +
        '><label>' +
        task.title +
        '</label></div></li>'; //trying to understand the '' & "" locations, seems off to me
      return liElement;
    }

    function toggleTask(e) { //why don't we use () and $(this) vs e.target?
      var itemId = $(e.target).data("id"); //.data() allows us to attach hidden data to item
      //console.log(itemId);
      var doneValue = Boolean($(e.target).is(':checked'));
      //console.log("done:", doneValue);
      $.post("/tasks/" + itemId, { //why do we need / at the end for updating?
        _method: "PUT",
        task: {
          done: doneValue
        }
      });
    }

      var retrieveIndex = $.get("/tasks").success( function(data) {
      var htmlString = "";
      $.each(data, function(index, task) {
        htmlString += taskHtml(task);
      });

      var ulTodos = $('.todo-list');
      ulTodos.html(htmlString);

      $('.toggle').change(toggleTask);
    });

      $('#new-form').submit(function(event){
      event.preventDefault();
      var newTask = {
        task: { //task comes from the $.each I believe?
        title: $('.new-todo').val()
        } //default boolean false
      };
      $.post("/tasks", newTask).success(function() {
        //var htmlString = taskHtml(data);
        //var ulTodos = $('.todo-list');
        $.get("/tasks").success( function(data) { //why can't i call retrieveIndex?? is retrieveIndex getting the value of the function instead of the function itself?
        var htmlString = "";
        $.each(data, function(index, task) {
          htmlString += taskHtml(task);
        });

        var ulTodos = $('.todo-list');
        ulTodos.html(htmlString);

        $('.toggle').change(toggleTask);
      });
        
        //ulTodos.append(htmlString);
        //$('.toggle').click(toggleTask); //post error on toggle if page isnt refreshed
      });
    });

  });
</script>